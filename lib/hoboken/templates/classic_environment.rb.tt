# frozen_string_literal: true

require 'bundler/setup'

unless 'production' == ENV.fetch('RACK_ENV', nil)
  require 'dotenv'
  Dotenv.load
end

require_relative '../app'

configure do
<% if options[:api_only] -%>
  use Rack::JSONBodyParser,
      verbs: %w[POST PUT],
      media: ['application/json', 'application/vnd.api+json']
<% else -%>
  use Rack::Session::Cookie, secret: ENV.fetch('SESSION_SECRET', nil)
  use Rack::Csrf, raise: true, skip_if: proc {
    'test' == ENV.fetch('RACK_ENV', 'production')
  }

  set :erb, { escape_html: true }

  set :assets_precompile, %w[
    javascripts/app.js
    stylesheets/styles.scss
    *.png *.jpg *.svg *.eot *.ttf *.woff *.woff2
  ]
  set :assets_paths, %w[assets vendor] + Sprockets.paths
  set :assets_css_compressor, :scss
  set :assets_js_compressor, Uglifier.new(harmony: true)
  register Sinatra::AssetPipeline
<% end -%>
end

configure :development do
  require 'better_errors'
  use BetterErrors::Middleware
  BetterErrors.application_root = File.expand_path('..', __dir__)
end

configure :test do
  set :raise_errors, true
  set :dump_errors, false
  set :show_exceptions, false
end

configure :production do
  before do
    redirect request.url.sub('http', 'https') unless request.secure?
  end
end
